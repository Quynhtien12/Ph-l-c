import cv2
import mediapipe as mp
import math
import os
import pandas as pd

# Kh·ªüi t·∫°o MediaPipe Pose
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=True)
mp_drawing = mp.solutions.drawing_utils

# K√≠ch th∆∞·ªõc ·∫£nh chu·∫©n
RESIZE_WIDTH = 480
RESIZE_HEIGHT = 320

# H√†m l·∫•y t·ªça ƒë·ªô landmark theo k√≠ch th∆∞·ªõc ·∫£nh
def get_landmark_coords(landmarks, idx):
    if landmarks and idx < len(landmarks):
        x = int(landmarks[idx].x * RESIZE_WIDTH)
        y = int(landmarks[idx].y * RESIZE_HEIGHT)
        return [x, y]
    else:
        return None

# H√†m t√≠nh g√≥c ·ªü c·ªï (neck)
def calculate_neck_angle(nose, neck):
    # T·∫°o vector tham chi·∫øu n·∫±m ngang
    reference_vector = [1, 0]  # Vector ngang (1, 0)
    
    # Vector t·ª´ c·ªï ƒë·∫øn m≈©i
    neck_to_nose = [nose[0] - neck[0], nose[1] - neck[1]]

    # T√≠nh t√≠ch v√¥ h∆∞·ªõng (dot product)
    dot = neck_to_nose[0] * reference_vector[0] + neck_to_nose[1] * reference_vector[1]
    
    # T√≠nh ƒë·ªô d√†i vector
    norm_n2n = math.sqrt(neck_to_nose[0] ** 2 + neck_to_nose[1] ** 2)
    norm_ref = math.sqrt(reference_vector[0] ** 2 + reference_vector[1] ** 2)
    
    # T√≠nh cos g√≥c
    cos_angle = dot / (norm_n2n * norm_ref + 1e-6)
    
    # Chuy·ªÉn ƒë·ªïi sang ƒë·ªô
    angle = math.degrees(math.acos(max(min(cos_angle, 1.0), -1.0)))

    # N·∫øu m≈©i th·∫•p h∆°n c·ªï (c√∫i ƒë·∫ßu), g√≥c √¢m
    if nose[1] > neck[1]:
        angle = -angle
    
    return angle

# D·ªØ li·ªáu l∆∞u tr·ªØ
data = []

# Th∆∞ m·ª•c ch·ª©a d·ªØ li·ªáu h√¨nh ·∫£nh
for label in ['Normal', 'Sleep']:
    folder = f'Data/{label}'
    for filename in os.listdir(folder):
        path = os.path.join(folder, filename)
        image = cv2.imread(path)

        if image is None:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {filename}")
            continue

        original_height, original_width = image.shape[:2]
        
        # Resize ·∫£nh n·∫øu ch∆∞a ƒë√∫ng k√≠ch th∆∞·ªõc
        if original_width != RESIZE_WIDTH or original_height != RESIZE_HEIGHT:
            print(f"üîÑ ƒêang resize ·∫£nh: {filename}")
            image = cv2.resize(image, (RESIZE_WIDTH, RESIZE_HEIGHT))
        else:
            print(f"‚úÖ ·∫¢nh ƒë√£ ƒë√∫ng k√≠ch th∆∞·ªõc: {filename}")

        # X·ª≠ l√Ω ·∫£nh v·ªõi MediaPipe
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        result = pose.process(image_rgb)

        if result.pose_landmarks:
            lm = result.pose_landmarks.landmark
            
            try:
                # L·∫•y t·ªça ƒë·ªô c√°c landmark
                shoulder = get_landmark_coords(lm, mp_pose.PoseLandmark.LEFT_SHOULDER)
                right_shoulder = get_landmark_coords(lm, mp_pose.PoseLandmark.RIGHT_SHOULDER)
                nose = get_landmark_coords(lm, mp_pose.PoseLandmark.NOSE)

                # T√≠nh trung ƒëi·ªÉm c·ªßa hai vai ƒë·ªÉ ra c·ªï
                if shoulder and right_shoulder:
                    neck = [(shoulder[0] + right_shoulder[0]) // 2,
                            (shoulder[1] + right_shoulder[1]) // 2]
                else:
                    print(f"‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu c·ªï trong ·∫£nh: {filename}")
                    continue

                # T√≠nh g√≥c t·∫°i c·ªï (gi·ªëng nh∆∞ ƒë·∫∑t th∆∞·ªõc ƒëo ƒë·ªô l√™n c·ªï)
                neck_angle = calculate_neck_angle(nose, neck)

                # L∆∞u v√†o danh s√°ch
                data.append([filename, neck_angle, label]) 

            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh: {filename} | Chi ti·∫øt: {str(e)}")
                continue

# Xu·∫•t d·ªØ li·ªáu ra file CSV
df = pd.DataFrame(data, columns=['filename', 'Neck Angle', 'label'])
df.to_csv('neck_angle_data.csv', index=False)
print("‚úÖ ƒê√£ xu·∫•t xong d·ªØ li·ªáu g√≥c t·∫°i c·ªï k√®m t√™n h√¨nh.")
